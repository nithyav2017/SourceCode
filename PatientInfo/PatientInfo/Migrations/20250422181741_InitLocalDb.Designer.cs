// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientInfo.Data;

#nullable disable

namespace PatientInfo.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    [Migration("20250422181741_InitLocalDb")]
    partial class InitLocalDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("PatientInfo.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PINHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("PatientInfo.Models.PatientDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConsentForEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConsentForText")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DemographicInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HCPSpecialty")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Indication")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PatientDetails");
                });

            modelBuilder.Entity("PatientInfo.Models.PatientDetails", b =>
                {
                    b.HasOne("PatientInfo.Data.ApplicationUser", "User")
                        .WithOne("PatientDetails")
                        .HasForeignKey("PatientInfo.Models.PatientDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientInfo.Data.ApplicationUser", b =>
                {
                    b.Navigation("PatientDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
